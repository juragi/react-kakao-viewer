{"version":3,"sources":["logo.svg","components/ChatItem.js","components/ChatRoom.js","components/FileHelper.js","components/Container.js","App.js","reportWebVitals.js","index.js"],"names":["MyChat","props","displayTime","className","timePart","text","OtherChat","ChatItem","isMyChat","myName","chat","name","items","map","item","i","title","date","content","timeStampStyle","ChatRoom","chats","undefined","DateStamp","style","labelStyle","margin","display","descriptionStyle","FileHelper","useState","setMyName","type","onChange","e","target","value","reader","FileReader","onload","sender","lines","lastName","lastTimePart","forEach","x","indexOf","firstIndexOfComma","firstIndexOfColon","dateString","substr","trim","chatText","dateStringSplited","split","time","pop","push","length","datePart","refreshChats","makeChats","result","console","log","files","readAsText","href","containerStyle","width","Container","setChats","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f6c2870.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Fragment} from 'react';\r\nimport './Chat.css';\r\n\r\nfunction MyChat(props) {\r\n    return (\r\n        <Fragment>\r\n            {props.displayTime ? <span className=\"Time\">{props.timePart}</span> : \"\"}\r\n            <span className=\"ChatText\">{props.text}</span>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nfunction OtherChat(props) {\r\n    return (\r\n        <Fragment>\r\n            <span className=\"ChatText\">{props.text}</span>\r\n            {props.displayTime ? <span className=\"Time\">{props.timePart}</span> : \"\"}\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default function ChatItem(props) {\r\n    const isMyChat = props.myName === props.chat.name;\r\n    var chat = isMyChat ? <MyChat /> : <OtherChat />;\r\n    return (\r\n        <div className={isMyChat ? 'ChatItem MyChat' : 'ChatItem'}>\r\n            <div className=\"Name\">{props.chat.name}</div>\r\n            <div>\r\n                <div className=\"chats\">\r\n                    {props.chat.items.map((item, i) => (\r\n                        <div className=\"Chat\" key={i} title={item.date}>\r\n                            {isMyChat ? <MyChat text={item.text} displayTime={item.displayTime} timePart={item.timePart}/> \r\n                                : <OtherChat text={item.text} displayTime={item.displayTime} timePart={item.timePart}/>}\r\n                            \r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n            {props.content}\r\n        </div>\r\n    )\r\n}","import ChatItem from './ChatItem';\r\nimport './Chat.css'\r\n\r\nconst timeStampStyle = {\r\n    \"text-align\": \"center\"\r\n}\r\n\r\nexport default function ChatRoom(props) {\r\n    return (\r\n        <div className=\"ChatRoom\">\r\n            {props.chats.map((chat, i) => (\r\n                chat.DateStamp !== undefined ? <div style={timeStampStyle}>{chat.DateStamp}</div> :\r\n                    <ChatItem key={i} chat={chat} myName={props.myName}/>\r\n            ))}\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\n\r\nconst labelStyle = {\r\n    margin: \"4px\",\r\n    display: \"block\"\r\n}\r\n\r\nconst descriptionStyle = {\r\n    \"font-size\": \"12px\",\r\n    \"color\": \"#666\"\r\n}\r\n\r\nexport default function FileHelper(props) {\r\n    const [myName, setMyName] = useState(\"\");\r\n    const makeChats = (lines) => {\r\n        //console.log(lines);\r\n        var chats = [];\r\n        var lastName;\r\n        var lastTimePart;\r\n        var chat;\r\n        lines.forEach((x, i)=> {\r\n            if(i > 1 && x) {\r\n                if(x.indexOf(\",\") > -1) {\r\n                    var firstIndexOfComma = x.indexOf(\",\");\r\n                    var firstIndexOfColon = x.indexOf(\":\", firstIndexOfComma);\r\n                    var dateString = x.substr(0, firstIndexOfComma);\r\n                    var name = x.substr(firstIndexOfComma + 1, firstIndexOfColon - firstIndexOfComma - 2).trim();\r\n                    var chatText = x.substr(firstIndexOfColon + 1).trim();\r\n\r\n                    var dateStringSplited = dateString.split(\" \");\r\n                    var time = dateStringSplited.pop();\r\n                    var ampm = dateStringSplited.pop();\r\n                    var timePart = ampm + \" \" + time;\r\n\r\n                    if(lastName !== name) {\r\n                        chat = {\r\n                            name: name,\r\n                            items: []\r\n                        };\r\n                        chats.push(chat);\r\n                    } else if (lastTimePart === timePart) {\r\n                        //console.log(chat.items[chat.items.length - 1])\r\n                        chat.items[chat.items.length - 1].displayTime = false;\r\n                    }\r\n\r\n                    //console.log(timePart);\r\n\r\n                    \r\n                    //var chat = {name: name, items: []}\r\n                    var item = {\r\n                        date: dateString,\r\n                        text: chatText,\r\n                        timePart: timePart,\r\n                        displayTime: true\r\n                    };\r\n                    chat.items.push(item);\r\n                    lastName = name;\r\n                    lastTimePart = timePart;\r\n                } else {\r\n                    var datePart = x.split(/오전|오후/)[0].trim();\r\n                    \r\n                    chats.push({DateStamp: datePart});\r\n                }\r\n            }\r\n        });\r\n        //console.log(chats);\r\n        props.refreshChats(chats, myName);\r\n    }\r\n\r\n    const onFileChange = (e) => {\r\n        var reader = new FileReader();\r\n        reader.onload = (sender) => {\r\n            var lines = sender.target.result.split(\"\\r\\n\");\r\n            makeChats(lines);\r\n        }\r\n        console.log(e.target.files)\r\n        if (e.target.files.length > 0) reader.readAsText(e.target.files[0]);\r\n        else props.refreshChats([], myName);\r\n    }\r\n\r\n    const onNameChange = (e) => {\r\n        setMyName(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label style={labelStyle}>내 이름: <input type='text' onChange={onNameChange}/></label>\r\n            <label style={labelStyle}><input type='file' onChange={onFileChange}/></label>\r\n            <div><a href=\"https://github.com/juragi/react-kakao-viewer/releases/download/v0/default.eml\">Download Sample file</a></div>\r\n            <div style={descriptionStyle}>\r\n                Sample file을 이용할 경우 이름은 '내이름'으로 입력한 다음 파일 선택\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport ChatRoom from './ChatRoom';\r\nimport FileHelper from './FileHelper';\r\n\r\nconst containerStyle = {\r\n    width: \"400px\",\r\n    margin: \"0 auto\",\r\n    \"text-align\": \"left\"\r\n}\r\n\r\nexport default function Container(props) {\r\n    const [chats, setChats] = useState([]);\r\n    const [myName, setMyName] = useState(\"\");\r\n    const refreshChats = (chats, myName) => {\r\n        setChats(chats);\r\n        setMyName(myName);\r\n        //console.log(chats);\r\n    }\r\n\r\n    return (\r\n        <div style={containerStyle}>\r\n            <FileHelper refreshChats={refreshChats}/>\r\n            <ChatRoom chats={chats} myName={myName}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Container from './components/Container'\n\nfunction App() {\n  //const [chats, setChats] = useState([]);\n  //function handleFileChange(e) {\n  //  console.log(e);\n  //  setChats([{content: \"test\"}, {content: \"test2\"}]);\n  //}\n\n  return (\n    <div className=\"App\">\n      <Container  />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}